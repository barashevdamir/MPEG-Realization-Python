import heapq
import collections

class AdaptiveHuffman:
    def __init__(self):
        self.frequency = collections.defaultdict(int)
        self.heap = []
        self.codes = {}
        self.modified = False

    def update_frequency(self, symbol, count):
        self.frequency[symbol] += count
        self.modified = True

    def extract_codes(self, node, code):
        # Проверяем, является ли второй элемент node списком, если нет, то это лист
        if isinstance(node[1][0], list):
            # Если элемент является списком, то обрабатываем левую и правую часть дерева
            self.extract_codes(node[1][0], code + '0')
            self.extract_codes(node[1][1], code + '1')
        else:
            # Иначе это лист, сохраняем его код
            self.codes[node[1][0]] = code

    def rebuild_huffman_tree(self):
        if not self.modified:
            return
        self.heap = [[weight, [symbol, ""]] for symbol, weight in self.frequency.items()]
        heapq.heapify(self.heap)
        while len(self.heap) > 1:
            lo = heapq.heappop(self.heap)
            hi = heapq.heappop(self.heap)
            for pair in lo[1:]:
                pair[1] = '0' + pair[1]
            for pair in hi[1:]:
                pair[1] = '1' + pair[1]
            heapq.heappush(self.heap, [lo[0] + hi[0]] + [lo[1:] + hi[1:]])
        if self.heap:
            # Извлекаем коды начиная с корня, который теперь должен быть корректно обработан
            self.extract_codes(self.heap[0], "")
        self.modified = False

    def encode(self, data_list):
        result = []
        for data in data_list:
            for symbol, count in data:
                self.update_frequency(symbol, count)
            self.rebuild_huffman_tree()
            encoded_data = ''.join(self.codes[symbol] for symbol, count in data for _ in range(count))
            result.append(encoded_data)
        return result

    def decode(self, encoded_data):
        current_code = ""
        decoded_data = []
        reverse_huffman_table = {v: k for k, v in self.codes.items()}
        for bit in encoded_data:
            current_code += bit
            if current_code in reverse_huffman_table:
                decoded_data.append(reverse_huffman_table[current_code])
                current_code = ""
        return decoded_data

# # Пример использования
# adaptive_huffman = AdaptiveHuffman()
# data = [[(606.0, 1), (3.0, 2), (1.0, 1), (3.0, 1), (1.0, 1), (0.0, 1), (2.0, 2), (0.0, 55)], [(604.0, 1), (0.0, 63)], [(609.0, 1), (1.0, 2), (-0.0, 1), (1.0, 1), (0.0, 59)], [(606.0, 1), (2.0, 1), (-0.0, 62)], [(605.0, 1), (1.0, 2), (-0.0, 1), (1.0, 1), (-0.0, 59)], [(604.0, 1), (0.0, 63)], [(600.0, 1), (0.0, 63)], [(604.0, 1), (0.0, 63)], [(597.0, 1), (7.0, 1), (1.0, 1), (-1.0, 1), (-2.0, 1), (-1.0, 1), (-0.0, 1), (1.0, 1), (2.0, 1), (1.0, 1), (-1.0, 1), (-0.0, 1), (-1.0, 2), (-0.0, 50)], [(516.0, 1), (50.0, 1), (53.0, 1), (-8.0, 1), (-25.0, 1), (-2.0, 1), (1.0, 1), (-9.0, 1), (-7.0, 1), (2.0, 1), (-0.0, 1), (3.0, 1), (2.0, 1), (0.0, 1), (-3.0, 1), (0.0, 2), (-1.0, 1), (0.0, 1), (1.0, 1), (0.0, 44)], [(333.0, 1), (57.0, 1), (51.0, 1), (2.0, 1), (19.0, 1), (4.0, 1), (2.0, 1), (-1.0, 1), (9.0, 1), (6.0, 1), (1.0, 1), (-1.0, 2), (0.0, 3), (1.0, 1), (-1.0, 1), (-2.0, 1), (-3.0, 1), (-0.0, 7), (-1.0, 1), (0.0, 36)], [(240.0, 1), (9.0, 1), (20.0, 1), (-1.0, 1), (4.0, 1), (-8.0, 1), (1.0, 1), (-2.0, 1), (-1.0, 2), (0.0, 3), (1.0, 2), (0.0, 49)], [(200.0, 1), (8.0, 1), (-7.0, 1), (3.0, 1), (6.0, 1), (-7.0, 1), (0.0, 2), (-2.0, 1), (1.0, 1), (0.0, 1), (1.0, 1), (-0.0, 2), (1.0, 1), (0.0, 49)], [(208.0, 1), (-8.0, 1), (-30.0, 1), (2.0, 1), (6.0, 1), (-1.0, 3), (-3.0, 1), (3.0, 1), (-0.0, 1), (-1.0, 1), (-2.0, 1), (-1.0, 1), (0.0, 5), (1.0, 1), (-0.0, 44)], [(259.0, 1), (-18.0, 1), (-55.0, 1), (-3.0, 1), (2.0, 1), (-11.0, 1), (-1.0, 1), (7.0, 1), (2.0, 1), (7.0, 1), (0.0, 1), (1.0, 1), (6.0, 1), (0.0, 2), (1.0, 1), (-0.0, 2), (-3.0, 1), (-0.0, 1), (-1.0, 1), (0.0, 4), (1.0, 1), (-0.0, 38)], [(260.0, 1), (7.0, 1), (-42.0, 1), (2.0, 1), (-2.0, 1), (5.0, 1), (0.0, 1), (-2.0, 1), (-10.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (0.0, 1), (2.0, 1), (0.0, 6), (-1.0, 1), (0.0, 43)], [(268.0, 1), (-8.0, 1), (-43.0, 1), (0.0, 2), (16.0, 1), (-0.0, 2), (-1.0, 1), (-4.0, 1), (-0.0, 54)], [(301.0, 1), (-13.0, 1), (-46.0, 1), (2.0, 1), (4.0, 1), (13.0, 1), (-1.0, 1), (1.0, 2), (-2.0, 1), (-0.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (0.0, 5), (1.0, 1), (-0.0, 44)], [(315.0, 1), (0.0, 1), (-19.0, 1), (1.0, 1), (-14.0, 1), (15.0, 1), (1.0, 1), (0.0, 1), (-1.0, 1), (-4.0, 1), (1.0, 1), (-1.0, 1), (0.0, 2), (1.0, 1), (0.0, 11), (1.0, 1), (-0.0, 37)], [(364.0, 1), (-35.0, 1), (39.0, 1), (0.0, 1), (-20.0, 1), (10.0, 1), (-3.0, 1), (-5.0, 1), (5.0, 1), (-0.0, 1), (2.0, 1), (-2.0, 1), (-1.0, 1), (-2.0, 1), (0.0, 1), (-1.0, 1), (1.0, 1), (-0.0, 3), (-1.0, 1), (0.0, 1), (-1.0, 1), (-0.0, 41)], [(487.0, 1), (-30.0, 1), (43.0, 1), (-1.0, 1), (22.0, 1), (-5.0, 1), (-1.0, 1), (-7.0, 1), (4.0, 1), (-1.0, 1), (-0.0, 1), (-1.0, 1), (1.0, 1), (-3.0, 1), (0.0, 2), (1.0, 1), (-0.0, 2), (1.0, 1), (0.0, 44)], [(536.0, 1), (-4.0, 1), (5.0, 1), (-0.0, 1), (-1.0, 1), (-4.0, 1), (-0.0, 2), (-2.0, 1), (1.0, 1), (0.0, 3), (1.0, 1), (-0.0, 50)], [(551.0, 1), (-1.0, 1), (4.0, 1), (-2.0, 1), (3.0, 1), (-1.0, 2), (0.0, 1), (-2.0, 1), (0.0, 55)], [(548.0, 1), (3.0, 1), (1.0, 1), (-1.0, 1), (-0.0, 1), (-1.0, 1), (0.0, 58)], [(534.0, 1), (1.0, 1), (0.0, 3), (-1.0, 1), (0.0, 1), (1.0, 1), (-1.0, 1), (0.0, 55)], [(530.0, 1), (1.0, 1), (2.0, 1), (0.0, 61)], [(530.0, 1), (0.0, 1), (2.0, 1), (-0.0, 61)], [(531.0, 1), (-1.0, 1), (2.0, 1), (0.0, 61)], [(532.0, 1), (2.0, 1), (4.0, 1), (0.0, 1), (1.0, 1), (0.0, 2), (1.0, 1), (0.0, 56)], [(525.0, 1), (3.0, 1), (2.0, 1), (-0.0, 1), (1.0, 1), (-0.0, 2), (1.0, 1), (0.0, 56)], [(509.0, 1), (3.0, 1), (1.0, 3), (-1.0, 1), (1.0, 1), (0.0, 57)], [(503.0, 1), (1.0, 1), (0.0, 62)], [(496.0, 1), (1.0, 1), (0.0, 6), (-1.0, 1), (-0.0, 55)], [(492.0, 1), (4.0, 1), (-0.0, 2), (1.0, 1), (-0.0, 1), (-1.0, 1), (1.0, 1), (-0.0, 5), (-1.0, 1), (0.0, 50)], [(485.0, 1), (4.0, 1), (-0.0, 2), (-1.0, 1), (-0.0, 1), (-1.0, 1), (0.0, 2), (1.0, 1), (-1.0, 1), (-0.0, 53)], [(473.0, 1), (4.0, 1), (-2.0, 1), (-1.0, 1), (3.0, 1), (-1.0, 1), (0.0, 1), (-1.0, 1), (2.0, 1), (-0.0, 55)], [(459.0, 1), (2.0, 1), (-15.0, 1), (-0.0, 1), (2.0, 1), (-8.0, 1), (0.0, 2), (3.0, 1), (-4.0, 1), (0.0, 3), (2.0, 1), (-1.0, 1), (-0.0, 4), (1.0, 1), (-0.0, 44)], [(453.0, 1), (0.0, 1), (-18.0, 1), (1.0, 2), (-11.0, 1), (0.0, 1), (-1.0, 1), (1.0, 1), (-6.0, 1), (0.0, 4), (-3.0, 1), (0.0, 5), (-1.0, 1), (-0.0, 43)], [(443.0, 1), (6.0, 1), (-37.0, 1), (-0.0, 1), (7.0, 1), (-19.0, 1), (-1.0, 1), (2.0, 1), (4.0, 1), (-8.0, 1), (-0.0, 1), (-1.0, 1), (1.0, 1), (0.0, 1), (-3.0, 1), (0.0, 5), (-1.0, 1), (0.0, 43)], [(427.0, 1), (2.0, 1), (-45.0, 1), (1.0, 1), (0.0, 1), (-23.0, 1), (0.0, 2), (1.0, 1), (-10.0, 1), (-0.0, 4), (-2.0, 1), (-0.0, 5), (-1.0, 1), (-0.0, 43)], [(602.0, 1), (1.0, 2), (0.0, 1), (-1.0, 1), (1.0, 1), (-0.0, 58)], [(601.0, 1), (0.0, 1), (1.0, 1), (-0.0, 2), (1.0, 1), (0.0, 58)], [(605.0, 1), (1.0, 2), (-0.0, 1), (1.0, 1), (0.0, 59)], [(603.0, 1), (2.0, 1), (-1.0, 1), (0.0, 61)], [(602.0, 1), (1.0, 2), (-0.0, 5), (-1.0, 1), (0.0, 55)], [(601.0, 1), (0.0, 1), (1.0, 1), (-0.0, 2), (1.0, 1), (0.0, 58)], [(598.0, 1), (0.0, 1), (2.0, 1), (-0.0, 61)], [(596.0, 1), (0.0, 1), (4.0, 1), (0.0, 2), (-1.0, 1), (-0.0, 2), (-1.0, 1), (-0.0, 55)], [(527.0, 1), (51.0, 1), (46.0, 1), (-8.0, 1), (-21.0, 1), (-8.0, 1), (1.0, 1), (2.0, 1), (-3.0, 1), (3.0, 1), (-1.0, 1), (1.0, 1), (3.0, 1), (0.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (-0.0, 1), (-1.0, 1), (0.0, 1), (1.0, 1), (0.0, 43)], [(324.0, 1), (47.0, 1), (48.0, 1), (6.0, 1), (14.0, 1), (3.0, 1), (2.0, 1), (-0.0, 1), (1.0, 1), (3.0, 1), (0.0, 2), (-1.0, 1), (1.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 1), (0.0, 6), (-1.0, 1), (0.0, 39)], [(215.0, 1), (26.0, 1), (17.0, 1), (3.0, 1), (5.0, 1), (2.0, 1), (1.0, 2), (-0.0, 3), (1.0, 1), (0.0, 1), (1.0, 1), (0.0, 50)], [(189.0, 1), (-9.0, 1), (-10.0, 1), (3.0, 1), (14.0, 1), (8.0, 1), (-1.0, 1), (-6.0, 2), (-1.0, 1), (0.0, 1), (1.0, 4), (-0.0, 2), (1.0, 1), (0.0, 46)], [(239.0, 1), (-22.0, 1), (-43.0, 1), (3.0, 2), (8.0, 1), (-0.0, 2), (8.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (-2.0, 1), (-0.0, 4), (1.0, 1), (0.0, 46)], [(307.0, 1), (-17.0, 1), (-35.0, 1), (2.0, 1), (-7.0, 1), (-3.0, 1), (-1.0, 2), (0.0, 1), (-2.0, 1), (-0.0, 2), (1.0, 3), (0.0, 49)], [(359.0, 1), (-15.0, 1), (-21.0, 1), (0.0, 1), (-6.0, 1), (-5.0, 1), (-0.0, 1), (1.0, 2), (-2.0, 1), (-0.0, 4), (-1.0, 1), (-0.0, 49)], [(392.0, 1), (-5.0, 1), (-3.0, 1), (1.0, 1), (-2.0, 1), (-3.0, 1), (-0.0, 1), (-1.0, 1), (-3.0, 1), (-2.0, 1), (-0.0, 3), (-1.0, 2), (-0.0, 5), (-1.0, 1), (0.0, 43)], [(412.0, 1), (-5.0, 1), (-3.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (-0.0, 3), (-1.0, 1), (-0.0, 54)], [(427.0, 1), (-6.0, 1), (-9.0, 1), (1.0, 2), (-1.0, 1), (-0.0, 1), (1.0, 2), (0.0, 55)], [(444.0, 1), (-5.0, 1), (-13.0, 1), (-1.0, 1), (2.0, 1), (-1.0, 1), (-0.0, 2), (-1.0, 1), (-2.0, 1), (0.0, 3), (1.0, 1), (-1.0, 1), (-0.0, 49)], [(456.0, 1), (-1.0, 1), (-28.0, 1), (-0.0, 1), (8.0, 1), (-7.0, 1), (0.0, 1), (1.0, 1), (5.0, 1), (-3.0, 1), (-0.0, 2), (1.0, 1), (0.0, 1), (-1.0, 1), (-0.0, 5), (-1.0, 1), (0.0, 43)], [(468.0, 1), (-10.0, 1), (-24.0, 1), (1.0, 1), (-9.0, 1), (-5.0, 1), (-0.0, 1), (2.0, 1), (-6.0, 1), (-2.0, 1), (-0.0, 2), (1.0, 1), (-2.0, 1), (-0.0, 5), (-1.0, 1), (0.0, 44)], [(474.0, 1), (2.0, 1), (11.0, 1), (3.0, 1), (-11.0, 1), (5.0, 1), (-0.0, 1), (-1.0, 2), (1.0, 1), (0.0, 2), (-1.0, 1), (-0.0, 51)], [(511.0, 1), (-23.0, 1), (18.0, 1), (-2.0, 1), (7.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (1.0, 2), (0.0, 1), (-1.0, 1), (0.0, 1), (1.0, 1), (-0.0, 4), (1.0, 1), (-0.0, 45)], [(535.0, 1), (3.0, 1), (6.0, 1), (-0.0, 1), (2.0, 1), (-1.0, 1), (0.0, 1), (-1.0, 1), (0.0, 4), (1.0, 1), (0.0, 51)], [(530.0, 1), (-1.0, 1), (2.0, 1), (-0.0, 4), (-1.0, 1), (0.0, 56)], [(528.0, 1), (0.0, 1), (1.0, 1), (0.0, 1), (1.0, 1), (0.0, 59)], [(527.0, 1), (-0.0, 1), (1.0, 1), (-0.0, 61)], [(526.0, 1), (0.0, 1), (2.0, 1), (-0.0, 61)], [(523.0, 1), (1.0, 1), (4.0, 1), (0.0, 1), (-1.0, 1), (0.0, 3), (-1.0, 1), (0.0, 55)], [(517.0, 1), (3.0, 1), (4.0, 1), (-1.0, 1), (0.0, 2), (1.0, 1), (-1.0, 1), (1.0, 1), (0.0, 55)], [(504.0, 1), (0.0, 4), (-1.0, 1), (0.0, 58)], [(499.0, 1), (2.0, 2), (-0.0, 61)], [(490.0, 1), (4.0, 2), (0.0, 1), (-1.0, 1), (0.0, 3), (-1.0, 1), (0.0, 55)], [(483.0, 1), (2.0, 1), (3.0, 1), (-0.0, 1), (2.0, 1), (1.0, 1), (-0.0, 2), (1.0, 1), (-0.0, 55)], [(478.0, 1), (3.0, 1), (2.0, 1), (-0.0, 1), (2.0, 1), (0.0, 59)], [(474.0, 1), (1.0, 2), (0.0, 1), (-1.0, 1), (0.0, 59)], [(467.0, 1), (2.0, 1), (3.0, 1), (-1.0, 2), (0.0, 59)], [(458.0, 1), (0.0, 1), (4.0, 1), (1.0, 1), (0.0, 60)], [(463.0, 1), (-1.0, 1), (3.0, 1), (-0.0, 5), (1.0, 1), (0.0, 5), (1.0, 1), (-0.0, 49)], [(461.0, 1), (1.0, 1), (0.0, 2), (1.0, 1), (-1.0, 1), (0.0, 3), (1.0, 1), (0.0, 4), (1.0, 1), (-0.0, 49)], [(602.0, 1), (0.0, 1), (2.0, 1), (-0.0, 61)], [(602.0, 1), (0.0, 1), (2.0, 1), (-0.0, 61)], [(599.0, 1), (0.0, 1), (3.0, 1), (-0.0, 61)], [(599.0, 1), (0.0, 1), (3.0, 1), (-0.0, 61)], [(596.0, 1), (1.0, 1), (2.0, 1), (0.0, 61)], [(592.0, 1), (-0.0, 1), (3.0, 1), (0.0, 61)], [(594.0, 1), (6.0, 1), (2.0, 1), (-3.0, 2), (-1.0, 1), (1.0, 2), (-0.0, 56)], [(522.0, 1), (40.0, 1), (44.0, 1), (-7.0, 1), (-22.0, 1), (-3.0, 1), (3.0, 1), (0.0, 1), (-1.0, 1), (2.0, 1), (0.0, 2), (3.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 2), (1.0, 1), (-0.0, 45)], [(327.0, 1), (53.0, 1), (57.0, 1), (6.0, 1), (20.0, 1), (8.0, 1), (3.0, 1), (2.0, 1), (1.0, 1), (2.0, 1), (1.0, 1), (-1.0, 3), (1.0, 2), (-1.0, 2), (-0.0, 2), (1.0, 1), (-0.0, 2), (-1.0, 1), (0.0, 40)], [(218.0, 1), (7.0, 1), (10.0, 1), (6.0, 1), (16.0, 1), (7.0, 1), (2.0, 1), (-5.0, 2), (-1.0, 1), (0.0, 3), (2.0, 1), (1.0, 1), (0.0, 1), (1.0, 1), (0.0, 47)], [(244.0, 1), (-16.0, 1), (-39.0, 1), (1.0, 1), (9.0, 1), (5.0, 1), (-0.0, 1), (2.0, 1), (11.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 2), (-0.0, 1), (-1.0, 1), (0.0, 8), (1.0, 1), (-0.0, 39)], [(303.0, 1), (-18.0, 1), (-23.0, 1), (1.0, 1), (-17.0, 1), (-10.0, 1), (-1.0, 1), (1.0, 1), (-5.0, 1), (-2.0, 1), (-0.0, 2), (3.0, 1), (0.0, 1), (-1.0, 1), (-0.0, 3), (1.0, 1), (-0.0, 1), (-1.0, 1), (-0.0, 43)], [(343.0, 1), (-9.0, 1), (-5.0, 1), (1.0, 1), (2.0, 1), (-1.0, 1), (0.0, 58)], [(365.0, 1), (-5.0, 1), (-3.0, 1), (1.0, 1), (-2.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 1), (-0.0, 55)], [(381.0, 1), (-5.0, 1), (-1.0, 1), (-0.0, 61)], [(397.0, 1), (-5.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 1), (-0.0, 58)], [(418.0, 1), (-6.0, 1), (-0.0, 1), (-1.0, 1), (0.0, 2), (-1.0, 1), (0.0, 57)], [(444.0, 1), (-9.0, 1), (-1.0, 2), (-0.0, 1), (-1.0, 1), (-0.0, 58)], [(464.0, 1), (-5.0, 1), (-2.0, 1), (-1.0, 1), (0.0, 1), (1.0, 1), (-1.0, 1), (1.0, 1), (-1.0, 1), (-0.0, 55)], [(482.0, 1), (-7.0, 1), (-1.0, 1), (0.0, 2), (1.0, 1), (0.0, 1), (-1.0, 1), (-0.0, 56)]]
# encoded = adaptive_huffman.encode(data)
# decoded = adaptive_huffman.decode(encoded[0])